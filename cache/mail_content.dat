
<h3>发现最新漏洞情报<font color="red">13</font>条：</h3>
<ul>
    <li><font color="red">3</font>条由 [<a href="https://redqueen.tj-un.com/IntelHome.html">红后</a>] 提供</li>
    <li><font color="red">10</font>条由 [<a href="https://www.tenable.com/">Tenable (Nessus)</a>] 提供</li>
</ul>
<h3>详细漏洞清单如下：</h3>
<br/>
<br/>==============================================<br/>[<b>漏洞来源</b>] 红后<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-33179</font><br/>[<b>披露时间</b>] 2022-11-01 21:40:19<br/>[<b>漏洞描述</b>] Brocade Fabric OS 安全漏洞<br/>[<b>相关链接</b>] <a href='https://redqueen.tj-un.com/IntelDetails.html?id=b2807d5f2072496c978b423534032012'>https://redqueen.tj-un.com/IntelDetails.html?id=b2807d5f2072496c978b423534032012</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] 红后<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-3676</font><br/>[<b>披露时间</b>] 2022-11-01 21:29:34<br/>[<b>漏洞描述</b>] Eclipse Openj9 安全漏洞<br/>[<b>相关链接</b>] <a href='https://redqueen.tj-un.com/IntelDetails.html?id=34e9f852724949fd99bbfabb22cc9805'>https://redqueen.tj-un.com/IntelDetails.html?id=34e9f852724949fd99bbfabb22cc9805</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] 红后<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-3646</font><br/>[<b>披露时间</b>] 2022-11-01 21:25:37<br/>[<b>漏洞描述</b>] Linux kernel 安全漏洞<br/>[<b>相关链接</b>] <a href='https://redqueen.tj-un.com/IntelDetails.html?id=f00753b93179492c99d322704ec5fc25'>https://redqueen.tj-un.com/IntelDetails.html?id=f00753b93179492c99d322704ec5fc25</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42327</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] x86: unintended memory sharing between guests On Intel systems that support the "virtualize APIC accesses" feature, a guest can read and write the global shared xAPIC page by moving the local APIC out of xAPIC mode. Access to this shared page bypasses the expected isolation that should exist between two guests.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42327'>https://www.tenable.com/cve/CVE-2022-42327</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42326</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Guests can create arbitrary number of nodes via transactions T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] In case a node has been created in a transaction and it is later deleted in the same transaction, the transaction will be terminated with an error. As this error is encountered only when handling the deleted node at transaction finalization, the transaction will have been performed partially and without updating the accounting information. This will enable a malicious guest to create arbitrary number of nodes.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42326'>https://www.tenable.com/cve/CVE-2022-42326</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42324</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Oxenstored 32->31 bit integer truncation issues Integers in Ocaml are 63 or 31 bits of signed precision. The Ocaml Xenbus library takes a C uint32_t out of the ring and casts it directly to an Ocaml integer. In 64-bit Ocaml builds this is fine, but in 32-bit builds, it truncates off the most significant bit, and then creates unsigned/signed confusion in the remainder. This in turn can feed a negative value into logic not expecting a negative value, resulting in unexpected exceptions being thrown. The unexpected exception is not handled suitably, creating a busy-loop trying (and failing) to take the bad packet out of the xenstore ring.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42324'>https://www.tenable.com/cve/CVE-2022-42324</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42323</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Cooperating guests can create arbitrary numbers of nodes T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Since the fix of XSA-322 any Xenstore node owned by a removed domain will be modified to be owned by Dom0. This will allow two malicious guests working together to create an arbitrary number of Xenstore nodes. This is possible by domain A letting domain B write into domain A's local Xenstore tree. Domain B can then create many nodes and reboot. The nodes created by domain B will now be owned by Dom0. By repeating this process over and over again an arbitrary number of nodes can be created, as Dom0's number of nodes isn't limited by Xenstore quota.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42323'>https://www.tenable.com/cve/CVE-2022-42323</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42322</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Cooperating guests can create arbitrary numbers of nodes T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Since the fix of XSA-322 any Xenstore node owned by a removed domain will be modified to be owned by Dom0. This will allow two malicious guests working together to create an arbitrary number of Xenstore nodes. This is possible by domain A letting domain B write into domain A's local Xenstore tree. Domain B can then create many nodes and reboot. The nodes created by domain B will now be owned by Dom0. By repeating this process over and over again an arbitrary number of nodes can be created, as Dom0's number of nodes isn't limited by Xenstore quota.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42322'>https://www.tenable.com/cve/CVE-2022-42322</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42321</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Guests can crash xenstored via exhausting the stack Xenstored is using recursion for some Xenstore operations (e.g. for deleting a sub-tree of Xenstore nodes). With sufficiently deep nesting levels this can result in stack exhaustion on xenstored, leading to a crash of xenstored.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42321'>https://www.tenable.com/cve/CVE-2022-42321</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42320</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Guests can get access to Xenstore nodes of deleted domains Access rights of Xenstore nodes are per domid. When a domain is gone, there might be Xenstore nodes left with access rights containing the domid of the removed domain. This is normally no problem, as those access right entries will be corrected when such a node is written later. There is a small time window when a new domain is created, where the access rights of a past domain with the same domid as the new one will be regarded to be still valid, leading to the new domain being able to get access to a node which was meant to be accessible by the removed domain. For this to happen another domain needs to write the node before the newly created domain is being introduced to Xenstore by dom0.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42320'>https://www.tenable.com/cve/CVE-2022-42320</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42319</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: Guests can cause Xenstore to not free temporary memory When working on a request of a guest, xenstored might need to allocate quite large amounts of memory temporarily. This memory is freed only after the request has been finished completely. A request is regarded to be finished only after the guest has read the response message of the request from the ring page. Thus a guest not reading the response can cause xenstored to not free the temporary memory. This can result in memory shortages causing Denial of Service (DoS) of xenstored.<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42319'>https://www.tenable.com/cve/CVE-2022-42319</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42318</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: guests can let run xenstored out of memory T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Malicious guests can cause xenstored to allocate vast amounts of memory, eventually resulting in a Denial of Service (DoS) of xenstored. There are multiple ways how guests can cause large memory allocations in xenstored: - - by issuing new requests to xenstored without reading the responses, causing the responses to be buffered in memory - - by causing large number of watch events to be generated via setting up multiple xenstore watches and then e.g. deleting many xenstore nodes below the watched path - - by creating as many nodes as allowed with the maximum allowed size and path length in as many transactions as possible - - by accessing many nodes inside a transaction<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42318'>https://www.tenable.com/cve/CVE-2022-42318</a>
<br/>==============================================<br/>[<b>漏洞来源</b>] Tenable (Nessus)<br/>[<b>漏洞编号</b>] <font color='blue'>CVE-2022-42317</font><br/>[<b>披露时间</b>] 2022-11-01 13:15:00<br/>[<b>漏洞描述</b>] Xenstore: guests can let run xenstored out of memory T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Malicious guests can cause xenstored to allocate vast amounts of memory, eventually resulting in a Denial of Service (DoS) of xenstored. There are multiple ways how guests can cause large memory allocations in xenstored: - - by issuing new requests to xenstored without reading the responses, causing the responses to be buffered in memory - - by causing large number of watch events to be generated via setting up multiple xenstore watches and then e.g. deleting many xenstore nodes below the watched path - - by creating as many nodes as allowed with the maximum allowed size and path length in as many transactions as possible - - by accessing many nodes inside a transaction<br/>[<b>相关链接</b>] <a href='https://www.tenable.com/cve/CVE-2022-42317'>https://www.tenable.com/cve/CVE-2022-42317</a>

<br/><br/>
++++++++++++++++++++++++++++++++++++++++++++++
<br/>
<font color="red">【漏洞情报收集与播报支持】</font> https://threat.yg-sec.com/
